{
  parserClass="be.programaths.idea.plugins.editors.tss.TSSParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Tss"
  psiImplClassSuffix="Impl"
  psiPackage="be.programaths.idea.plugins.editors.tss.psi"
  psiImplPackage="be.programaths.idea.plugins.editors.tss.impl"

  elementTypeHolderClass="be.programaths.idea.plugins.editors.tss.psi.TSSTypes"
  elementTypeClass="be.programaths.idea.plugins.editors.tss.psi.TSSElementType"
  tokenTypeClass="be.programaths.idea.plugins.editors.tss.psi.TSSTokenType"
  tokens = [
    ITER = 'iteration'
    DATA = 'data'
    LPAR = '('
    RPAR = ')'
    COMMENT = "regexp:/\*(.|\n)+\*/"
    CLRF = "regexp:\n"
    WS = "regexp:\s+"
    LBRACE = '{'
    RBRACE = '}'
    SEMI = ';'
    COLON = ':'
    COMA = ','
    EQ = '='
    IDENT = 'regexp:[a-zA-Z]+'
    STRING = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    INT = "regexp:\d+"
    GT = '>'
    PLS = '+'
    POUND = '#'
    DOT = '.'
    LSQ = '['
    RSQ = ']'
  ]

}

tssFile ::= (rule|COMMENT)*

rule ::= selector LBRACE dec* RBRACE { pin=1; recoverWhile=recover_end_block }



private recover_end_block ::= !(selector)

selector ::= (elem | class | id | compound )+ attr_select? ( selector_sep selector )*

compound ::= elem? ((DOT|POUND) id)+

dec ::= content COLON compound_data SEMI
        | repeat COLON data_ref SEMI
        | display COLON none SEMI {pin=1;recoverWhile=recover_end_dec}

private recover_end_dec ::= !(dec|SEMI|RBRACE|selector)

private compound_data ::= (data_ref|STRING) (COMA compound_data)?

elem ::= 'div' | 'form' | 'p' | 'q'

selector_sep ::= GT | COMA | PLS

class ::= DOT IDENT
id ::= POUND IDENT

data_ref ::= (ITER|DATA) LPAR ident_path? RPAR

ident_path ::= IDENT (DOT IDENT)+ | IDENT

attr_select ::= LSQ IDENT EQ (STRING|INT) RSQ | LSQ IDENT RSQ